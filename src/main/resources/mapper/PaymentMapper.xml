<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aipms.mapper.PaymentMapper">

    <insert id="insertPayment" parameterType="com.aipms.domain.Payment" useGeneratedKeys="true" keyProperty="paymentId">
        INSERT INTO payment (
            member_id,
            entry_id,
            total_fee,
            payment_method,
            payment_gateway,
            paid,
            status,
            cancelled,
            payment_time,
            transaction_id,
            merchant_uid,
            imp_uid
        )
        VALUES (
                #{memberId},
                #{entryId},
                #{totalFee},
                #{paymentMethod},
                #{gateway},
                #{paid},
                #{status},
                #{cancelled},
                #{paymentTime},
                #{transactionId},
                #{merchantUid},
                #{impUid}
               )
    </insert>

    <select id="selectByTransactionId" resultType="com.aipms.domain.Payment">
        SELECT *
        FROM payment
        WHERE transaction_id = #{transactionId}
    </select>

    <select id="selectPaymentById" resultType="com.aipms.domain.Payment">
        SELECT * FROM payment WHERE payment_id = #{paymentId}
    </select>

    <select id="selectPaymentByEntryId" resultType="com.aipms.domain.Payment">
        SELECT * FROM payment WHERE entry_id = #{entryId}
    </select>


    <select id="getAccountInfo" resultType="com.aipms.dto.AccountInfoResponseDto">
        SELECT
            point,
            point_expire_next_month AS pointExpireNextMonth,
            prepaid_balance AS prepaidBalance,
            last_charged_at AS lastChargedAt,
            monthly_usage AS monthlyUsage,
            compare_last_month AS compareLastMonth
        FROM account_info
        WHERE member_id = #{memberId}
    </select>

    <!-- ✅ 결제 내역 목록 조회 (필터 + 페이징) -->
    <select id="selectPayments" resultType="com.aipms.domain.Payment">
        SELECT p.*
        FROM payment p
        JOIN entry_log el ON el.payment_id = p.payment_id
        JOIN car c ON el.car_id = c.car_id
        <where>
            <if test="req.memberId != null">
                AND c.member_id = #{req.memberId}
            </if>
            <if test="req.startDate != null and req.startDate != ''">
                AND p.payment_time &gt;= #{req.startDate}
            </if>
            <if test="req.endDate != null and req.endDate != ''">
                AND p.payment_time &lt;= CONCAT(#{req.endDate}, ' 23:59:59')
            </if>
            <!-- ✅ paid 컬럼으로 결제 여부 필터링 -->
            <if test="req.status != null and req.status != '' and req.status != 'all'">
                AND p.paid =
                <choose>
                    <when test="req.status == 'paid'">1</when>
                    <when test="req.status == 'unpaid'">0</when>
                </choose>
            </if>
            <if test="req.keyword != null and req.keyword != ''">
                AND (
                CAST(p.payment_id AS CHAR) LIKE CONCAT('%', #{req.keyword}, '%')
                OR p.payment_method LIKE CONCAT('%', #{req.keyword}, '%')
                )
            </if>
        </where>
        ORDER BY p.payment_time DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>





    <!-- ✅ 결제 총 건수 (페이징용) -->
    <select id="countPayments" resultType="int">
        SELECT COUNT(*)
        FROM payment p
        JOIN entry_log el ON el.payment_id = p.payment_id
        JOIN car c ON el.car_id = c.car_id
        <where>
            <if test="req.memberId != null">
                AND c.member_id = #{req.memberId}
            </if>
            <if test="req.startDate != null and req.startDate != ''">
                AND p.payment_time &gt;= #{req.startDate}
            </if>
            <if test="req.endDate != null and req.endDate != ''">
                AND p.payment_time &lt;= CONCAT(#{req.endDate}, ' 23:59:59')
            </if>
            <!-- ✅ paid 컬럼 기준으로 상태 필터 -->
            <if test="req.status != null and req.status != '' and req.status != 'all'">
                AND p.paid =
                <choose>
                    <when test="req.status == 'paid'">1</when>
                    <when test="req.status == 'unpaid'">0</when>
                </choose>
            </if>
            <if test="req.keyword != null and req.keyword != ''">
                AND (
                CAST(p.payment_id AS CHAR) LIKE CONCAT('%', #{req.keyword}, '%')
                OR p.payment_method LIKE CONCAT('%', #{req.keyword}, '%')
                )
            </if>
        </where>
    </select>

    <update id="updatePaidStatus">
        UPDATE payment
        SET paid = #{paid}
        WHERE payment_id = #{paymentId}
    </update>





</mapper>
